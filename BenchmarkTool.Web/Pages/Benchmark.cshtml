@page
@model BenchmarkModel
@{
	ViewData["Title"] = "C# Benchmark Tool";
}

<div class="container-fluid mt-4">
	<div class="row mb-4">
		<div class="col">
			<h1 class="display-4">
				<i class="bi bi-speedometer2"></i> C# Benchmark Tool
			</h1>
			<p class="lead">Compare the performance of two C# code snippets side-by-side</p>
		</div>
	</div>

	<form method="post" id="benchmarkForm">
		<input type="hidden" asp-for="ConnectionId" id="connectionId" />
		<!-- Declarations Editor Row -->
		<div class="row mb-3">
			<div class="col">
				<div class="card h-100">
					<div class="card-header bg-secondary text-white">
						<h5 class="mb-0">
							<i class="bi bi-braces"></i> Variables and declarations
						</h5>
					</div>
					<div class="card-body p-0">
						<div id="editorDeclarations" style="height:100px; border:1px solid #ddd;"></div>
						<input type="hidden" asp-for="Request.DeclarationsCode" id="declarationsCode" />
					</div>
				</div>
			</div>
		</div>

		<!-- Setup Editor Row -->
		<div class="row mb-3">
			<div class="col">
				<div class="card h-100">
					<div class="card-header bg-info text-white">
						<h5 class="mb-0">
							<i class="bi bi-tools"></i> Setup
						</h5>
					</div>
					<div class="card-body p-0">
						<div id="editorSetup" style="height:100px; border:1px solid #ddd;"></div>
						<input type="hidden" asp-for="Request.SetupCode" id="setupCode" />
					</div>
				</div>
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-md-6">
				<div class="card h-100">
					<div class="card-header bg-primary text-white">
						<h5 class="mb-0">
							<i class="bi bi-code-slash"></i> Method A
						</h5>
					</div>
					<div class="card-body p-0">
						<div id="editorA" style="height:200px; border:1px solid #ddd;"></div>
						<input type="hidden" asp-for="Request.MethodACode" id="methodACode" />
					</div>
				</div>
			</div>
			<div class="col-md-6">
				<div class="card h-100">
					<div class="card-header bg-success text-white">
						<h5 class="mb-0">
							<i class="bi bi-code-slash"></i> Method B
						</h5>
					</div>
					<div class="card-body p-0">
						<div id="editorB" style="height:200px; border:1px solid #ddd;"></div>
						<input type="hidden" asp-for="Request.MethodBCode" id="methodBCode" />
					</div>
				</div>
			</div>
		</div>

		<div class="row mb-3">
			<div class="col text-center">
				<button type="submit" class="btn btn-primary btn-lg" id="runBenchmark" disabled>
					<i class="bi bi-play-fill"></i> Run Benchmark
				</button>
				<button type="button" class="btn btn-secondary btn-lg" id="resetEditors">
					<i class="bi bi-arrow-clockwise"></i> Reset
				</button>
			</div>
		</div>
	</form>

	<!-- Progress Indicator -->
	<div id="progressSection" class="row mb-3" style="display: none;">
		<div class="col">
			<div class="card">
				<div class="card-body">
					<h5><i class="bi bi-hourglass-split"></i> Running Benchmark...</h5>
					<div id="queuedNote" class="alert alert-info py-2 px-3" style="display:none;">
						<i class="bi bi-info-circle"></i> Another benchmark is running. You are queued and will start automatically...
					</div>
					<div class="progress mb-2">
						<div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated"
							 role="progressbar" style="width:0%"></div>
					</div>
					<p id="progressMessage" class="mb-0 text-muted">Initializing...</p>
				</div>
			</div>
		</div>
	</div>

	<!-- Results Section -->
	@if (Model.Response != null)
	{
		<div class="row">
			<div class="col">
				@if (!Model.Response.Success)
				{
					<div class="alert alert-danger">
						<h5><i class="bi bi-exclamation-triangle-fill"></i> Error</h5>
						<p>@Model.Response.ErrorMessage</p>

						@if (Model.Response.CompilationErrors.Any())
						{
							<hr />
							<h6>Compilation Errors:</h6>
							<ul>
								@foreach (var error in Model.Response.CompilationErrors)
								{
									<li>
										<strong>Line @error.Line, Column @error.Column:</strong> @error.Message
										@if (!string.IsNullOrEmpty(error.ErrorCode))
										{
											<span class="badge bg-secondary">@error.ErrorCode</span>
										}
									</li>
								}
							</ul>
						}
					</div>
				}
				else
				{
					<div class="card">
						<div class="card-header bg-success text-white">
							<h5 class="mb-0"><i class="bi bi-check-circle-fill"></i> Benchmark Results</h5>
						</div>
						<div class="card-body">
							@if (!string.IsNullOrEmpty(Model.Response.ResultsMarkdown))
							{
								<div class="table-responsive">
									@Html.Raw(Model.Response.ResultsMarkdown)
								</div>
							}

							@if (!string.IsNullOrEmpty(Model.Response.RawOutput))
							{
								<details class="mt-3">
									<summary class="btn btn-sm btn-outline-secondary">View Raw Output</summary>
									<pre class="mt-2 p-3 bg-light"><code>@Model.Response.RawOutput</code></pre>
								</details>
							}

							<p class="text-muted mt-3 mb-0">
								<small>Execution time: @Model.Response.ExecutionTimeMs ms</small>
							</p>
						</div>
					</div>
				}
			</div>
		</div>
	}
</div>

@section Scripts {
	<!-- Load SignalR BEFORE Monaco's AMD loader so it exposes the global `signalR` -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

	<!-- Monaco Editor (AMD loader) -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>

	<script>
		 let editorDeclarations, editorSetup, editorA, editorB;
		 let connection;

		 // Initialize SignalR connection (global provided by script tag above)
		 function initSignalR() {
		 if (typeof window.signalR === 'undefined') {
		 console.error('SignalR not available');
		 return;
		 }

		 connection = new signalR.HubConnectionBuilder()
		 .withUrl("/benchmarkHub")
		 .withAutomaticReconnect()
		 .build();

		 connection.on("ReceiveProgress", function (message, percentage) {
		 // Only show progress UI when actual run starts (>=10%)
		 if (percentage >=10) {
		 const progressSection = document.getElementById('progressSection');
		 const queued = document.getElementById('queuedNote');
		 if (queued) queued.style.display = 'none';
		 if (progressSection.style.display === 'none') {
		 progressSection.style.display = 'block';
		 }
		 document.getElementById('progressBar').style.width = percentage + '%';
		 document.getElementById('progressMessage').textContent = message;
		 }
		 });

		 connection.on("ReceiveStatus", function (status) {
		 // Easiest way: show a small info note while queued
		 const progressSection = document.getElementById('progressSection');
		 const queued = document.getElementById('queuedNote');
		 if (queued) {
		 queued.textContent = status;
		 queued.style.display = 'block';
		 }
		 if (progressSection.style.display === 'none') {
		 progressSection.style.display = 'block';
		 }
		 });

		 connection.on("ReceiveError", function (error) {
		 document.getElementById('progressSection').style.display = 'none';
		 alert('Error: ' + error);
		 });

		 connection.on("ReceiveResults", function (results) {
		 document.getElementById('progressSection').style.display = 'none';
		 // Do not reload here. The POST response will render results on the page.
		 });

		 connection.start()
		 .then(function () {
		 console.log('SignalR connected');
		 // Attach current connection ID to the form
		 const connIdInput = document.getElementById('connectionId');
		 if (connIdInput) {
		 connIdInput.value = connection.connectionId || '';
		 }
		 // Enable Run button only after SignalR is ready to receive targeted messages
		 document.getElementById('runBenchmark').disabled = false;
		 })
		 .catch(function (err) {
		 console.error('SignalR connection error: ', err);
		 });
		 }

		 // Initialize Monaco Editor
		 require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });

		 require(['vs/editor/editor.main'], function () {
		 // Declarations Editor
		 editorDeclarations = monaco.editor.create(document.getElementById('editorDeclarations'), {
		 value: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Request.DeclarationsCode)),
		 language: 'csharp',
		 theme: 'vs-dark',
		 minimap: { enabled: false },
		 automaticLayout: true,
		 fontSize:14,
		 lineNumbers: 'on',
		 scrollBeyondLastLine: false
		 });

		 // Setup Editor
		 editorSetup = monaco.editor.create(document.getElementById('editorSetup'), {
		 value: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Request.SetupCode)),
		 language: 'csharp',
		 theme: 'vs-dark',
		 minimap: { enabled: false },
		 automaticLayout: true,
		 fontSize:14,
		 lineNumbers: 'on',
		 scrollBeyondLastLine: false
		 });

		 // Editors
		 editorA = monaco.editor.create(document.getElementById('editorA'), {
		 value: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Request.MethodACode)),
		 language: 'csharp',
		 theme: 'vs-dark',
		 minimap: { enabled: false },
		 automaticLayout: true,
		 fontSize:14,
		 lineNumbers: 'on',
		 scrollBeyondLastLine: false
		 });

		 editorB = monaco.editor.create(document.getElementById('editorB'), {
		 value: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Request.MethodBCode)),
		 language: 'csharp',
		 theme: 'vs-dark',
		 minimap: { enabled: false },
		 automaticLayout: true,
		 fontSize:14,
		 lineNumbers: 'on',
		 scrollBeyondLastLine: false
		 });
		 });

		 // Start SignalR immediately after scripts load
		 initSignalR();

		 // Form submission
		 document.getElementById('benchmarkForm').addEventListener('submit', function (e) {
		 // Update hidden fields with editor content
		 document.getElementById('declarationsCode').value = editorDeclarations.getValue();
		 document.getElementById('setupCode').value = editorSetup.getValue();
		 document.getElementById('methodACode').value = editorA.getValue();
		 document.getElementById('methodBCode').value = editorB.getValue();

		 // Refresh connection id in case it changed due to reconnect
		 const connIdInput = document.getElementById('connectionId');
		 if (connIdInput) {
		 connIdInput.value = connection.connectionId || connIdInput.value || '';
		 }

		 // Do not show progress yet; wait for server to show queued note or progress
		 });

		 // Reset button
		 document.getElementById('resetEditors').addEventListener('click', function () {
		 editorDeclarations.setValue(`// Sample Declarations\nprivate int size;`);

		 editorSetup.setValue(`// Sample Setup\n// Runs once before benchmarks (allocate shared data, etc.)\nsize =1000;`);

		 editorA.setValue(`// Sample Method A
var list = new List<int>();
for (int i =0; i <size; i++)
{
	list.Add(i);
}`);

		 editorB.setValue(`// Sample Method B
var array = new int[size];
for (int i =0; i <size; i++)
{
	array[i] = i;
}`);
		 });
	</script>
}
